"use strict";(self.webpackChunkpolkadot_js=self.webpackChunkpolkadot_js||[]).push([[6246],{4137:function(t,e,n){n.d(e,{Zo:function(){return p},kt:function(){return f}});var r=n(7294);function a(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function o(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function i(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?o(Object(n),!0).forEach((function(e){a(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function c(t,e){if(null==t)return{};var n,r,a=function(t,e){if(null==t)return{};var n,r,a={},o=Object.keys(t);for(r=0;r<o.length;r++)n=o[r],e.indexOf(n)>=0||(a[n]=t[n]);return a}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(r=0;r<o.length;r++)n=o[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(a[n]=t[n])}return a}var s=r.createContext({}),l=function(t){var e=r.useContext(s),n=e;return t&&(n="function"==typeof t?t(e):i(i({},e),t)),n},p=function(t){var e=l(t.components);return r.createElement(s.Provider,{value:e},t.children)},u="mdxType",d={inlineCode:"code",wrapper:function(t){var e=t.children;return r.createElement(r.Fragment,{},e)}},m=r.forwardRef((function(t,e){var n=t.components,a=t.mdxType,o=t.originalType,s=t.parentName,p=c(t,["components","mdxType","originalType","parentName"]),u=l(n),m=a,f=u["".concat(s,".").concat(m)]||u[m]||d[m]||o;return n?r.createElement(f,i(i({ref:e},p),{},{components:n})):r.createElement(f,i({ref:e},p))}));function f(t,e){var n=arguments,a=e&&e.mdxType;if("string"==typeof t||a){var o=n.length,i=new Array(o);i[0]=m;var c={};for(var s in e)hasOwnProperty.call(e,s)&&(c[s]=e[s]);c.originalType=t,c[u]="string"==typeof t?t:a,i[1]=c;for(var l=2;l<o;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},9102:function(t,e,n){n.r(e),n.d(e,{assets:function(){return p},contentTitle:function(){return s},default:function(){return f},frontMatter:function(){return c},metadata:function(){return l},toc:function(){return u}});var r=n(7462),a=n(3366),o=(n(7294),n(4137)),i=["components"],c={title:"Blueprint"},s=void 0,l={unversionedId:"api-contract/start/blueprint",id:"api-contract/start/blueprint",title:"Blueprint",description:"A BlueprintPromise works similarly to a CodePromise. It manages calls to the instantiate dispatchable in the contracts pallet and uses a code hash to retrieve previously uploaded contract code from chain storage.",source:"@site/docs/api-contract/start/blueprint.md",sourceDirName:"api-contract/start",slug:"/api-contract/start/blueprint",permalink:"/docs/api-contract/start/blueprint",draft:!1,editUrl:"https://github.com/polkadot-js/docs/edit/master/docs/api-contract/start/blueprint.md",tags:[],version:"current",frontMatter:{title:"Blueprint"},sidebar:"reference",previous:{title:"Code",permalink:"/docs/api-contract/start/code"},next:{title:"Contract",permalink:"/docs/api-contract/start/contract.read"}},p={},u=[],d={toc:u},m="wrapper";function f(t){var e=t.components,n=(0,a.Z)(t,i);return(0,o.kt)(m,(0,r.Z)({},d,n,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"A ",(0,o.kt)("inlineCode",{parentName:"p"},"BlueprintPromise")," works similarly to a ",(0,o.kt)("inlineCode",{parentName:"p"},"CodePromise"),". It manages calls to the ",(0,o.kt)("inlineCode",{parentName:"p"},"instantiate")," dispatchable in the contracts pallet and uses a code hash to retrieve previously uploaded contract code from chain storage.\nIf a non-existent ",(0,o.kt)("inlineCode",{parentName:"p"},"codeHash")," is used, the instantiation will fail on-chain. "),(0,o.kt)("p",null,"Let's take for example an ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/paritytech/ink/tree/master/examples/flipper/lib.rs"},"ink! flipper contract"),", the ",(0,o.kt)("inlineCode",{parentName:"p"},"tx.<constructorName>")," interface is a normal submittable extrinsic with the result containing an actual ",(0,o.kt)("inlineCode",{parentName:"p"},"ContractPromise")," instance, containing the address of the new contract."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"import { BlueprintPromise } from '@polkadot/api-contract';\n\nconst blueprint = new BlueprintPromise(api, metadata, codeHash);\n\nconst tx = blueprint.tx.default({ gasLimit, storageDepositLimit, salt });\n\nlet address;\n\nconst unsub = await tx.signAndSend(alicePair, ({ contract, status }) => {\n  if (status.isInBlock || status.isFinalized) {\n    address = contract.address.toString();\n    unsub();\n  }\n});\n")),(0,o.kt)("p",null,"We have made it this far. At this point you should be familiar with code deployments as well as contract instantiation, next up ",(0,o.kt)("a",{parentName:"p",href:"/docs/api-contract/start/contract.read"},"we will read a contract value"),"."))}f.isMDXComponent=!0}}]);