"use strict";(self.webpackChunkpolkadot_js=self.webpackChunkpolkadot_js||[]).push([[4409],{4137:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return f}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),l=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=l(e.components);return a.createElement(s.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),u=l(n),m=r,f=u["".concat(s,".").concat(m)]||u[m]||d[m]||i;return n?a.createElement(f,o(o({ref:t},p),{},{components:n})):a.createElement(f,o({ref:t},p))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=m;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c[u]="string"==typeof e?e:r,o[1]=c;for(var l=2;l<i;l++)o[l]=n[l];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},8288:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return s},default:function(){return f},frontMatter:function(){return c},metadata:function(){return l},toc:function(){return u}});var a=n(7462),r=n(3366),i=(n(7294),n(4137)),o=["components"],c={title:"Contract tx"},s=void 0,l={unversionedId:"api-contract/start/contract.tx",id:"api-contract/start/contract.tx",title:"Contract tx",description:"Interface",source:"@site/docs/api-contract/start/contract.tx.md",sourceDirName:"api-contract/start",slug:"/api-contract/start/contract.tx",permalink:"/docs/api-contract/start/contract.tx",draft:!1,editUrl:"https://github.com/polkadot-js/docs/edit/master/docs/api-contract/start/contract.tx.md",tags:[],version:"current",frontMatter:{title:"Contract tx"},sidebar:"reference",previous:{title:"Contract",permalink:"/docs/api-contract/start/contract.read"},next:{title:"FAQ",permalink:"/docs/api-contract/FAQ"}},p={},u=[{value:"Interface",id:"interface",level:2},{value:"Cost estimation",id:"cost-estimation",level:2},{value:"Events",id:"events",level:2},{value:"That is it... for now",id:"that-is-it-for-now",level:2}],d={toc:u},m="wrapper";function f(e){var t=e.components,n=(0,r.Z)(e,o);return(0,i.kt)(m,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"interface"},"Interface"),(0,i.kt)("p",null,"In addition to using the ",(0,i.kt)("inlineCode",{parentName:"p"},".query.<messageName>")," on a contract, the ",(0,i.kt)("inlineCode",{parentName:"p"},".tx.<messageName>")," method provides a way to send an actual encoded transaction to the contract, allow for execution and have this applied in a block. Expanding on our previous ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/paritytech/ink/blob/master/examples/incrementer/lib.rs"},"ink! incrementer")," example, we can now execute and then retrieve the subsequent value."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const value = 10000; // only for payable messages, call will fail otherwise\nconst gasLimit = 3000n * 1000000n;\nconst storageDepositLimit = null;\nconst incValue = 1;\n\n// Send the transaction, like elsewhere this is a normal extrinsic\n// with the same rules as applied in the API (As with the read example,\n// additional params, if required can follow - here only one is needed)\nawait contract.tx\n  .inc({ storageDepositLimit, gasLimit }, incValue)\n  .signAndSend(alicePair, result => {\n    if (result.status.isInBlock) {\n      console.log('in a block');\n    } else if (result.status.isFinalized) {\n      console.log('finalized');\n    }\n  });\n")),(0,i.kt)("p",null,"For the above interface we can specify the message as the string name, the index of the actual message as retrieved via the Abi."),(0,i.kt)("h2",{id:"cost-estimation"},"Cost estimation"),(0,i.kt)("p",null,"To estimate values for ",(0,i.kt)("inlineCode",{parentName:"p"},"gasLimit")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"storageDepositLimit"),", we can dry run the contract call using the ",(0,i.kt)("inlineCode",{parentName:"p"},".query")," (read) interfaces with a sufficiently large value to retrieve the actual gas and storage deposit consumed. The API makes this easy by passing ",(0,i.kt)("inlineCode",{parentName:"p"},"gasLimit: -1")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"storageDepositLimit: null")," to the query. The query will use the maximum tx weight for ",(0,i.kt)("inlineCode",{parentName:"p"},"gasLimit")," and available free balance for ",(0,i.kt)("inlineCode",{parentName:"p"},"storageDepositLimit"),"."),(0,i.kt)("p",null,"See this in practice for the ",(0,i.kt)("inlineCode",{parentName:"p"},"inc")," message on the ink! incrementer contract"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const incValue = 1;\nconst options = { storageDepositLimit: null, gasLimit: -1 }\n\nconst { gasRequired, storageDeposit, result } = await contract.query.inc(\n  alicePair,\n  options,\n  incValue\n);\n\nconsole.log(`outcome: ${result.isOk ? 'Ok' : 'Error'}`);\nconsole.log(`gasRequired ${gasRequired.toString()}`);\n")),(0,i.kt)("p",null,"We can use the ",(0,i.kt)("inlineCode",{parentName:"p"},"gasRequired")," input (potentially with a buffer for various execution paths) in any calls to ",(0,i.kt)("inlineCode",{parentName:"p"},"contract.tx.inc(...)")," with the same input parameters specified on the ",(0,i.kt)("inlineCode",{parentName:"p"},"query")," where the estimation was done."),(0,i.kt)("h2",{id:"events"},"Events"),(0,i.kt)("p",null,"On current versions of the API, any events raised by the contract will be transparently decoded with the relevant ABI and will be made available on the ",(0,i.kt)("inlineCode",{parentName:"p"},"result")," (from ",(0,i.kt)("inlineCode",{parentName:"p"},".signAndSend(alicePair, (result) => {...}"),") as ",(0,i.kt)("inlineCode",{parentName:"p"},"contractEvents"),"."),(0,i.kt)("p",null,"Where no events were emitted this value would be ",(0,i.kt)("inlineCode",{parentName:"p"},"undefined"),", however should events be emitted, the array will contain all the decoded values."),(0,i.kt)("h2",{id:"that-is-it-for-now"},"That is it... for now"),(0,i.kt)("p",null,"This was a whirl-wind tour of what the API provides in terms of the ",(0,i.kt)("inlineCode",{parentName:"p"},"@polkadot/api-contract")," interface. It is not perfect yet, we would like to expand it to allow for greater type-checking on the contracts (instead of read/exec wit messages), but hopefully in the current state it already enhances the way you can interact with contracts."))}f.isMDXComponent=!0}}]);