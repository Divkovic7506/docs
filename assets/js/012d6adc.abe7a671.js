"use strict";(self.webpackChunkpolkadot_js=self.webpackChunkpolkadot_js||[]).push([[8574],{4137:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return m}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=a.createContext({}),l=function(e){var t=a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},u=function(e){var t=l(e.components);return a.createElement(i.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=l(n),m=r,f=d["".concat(i,".").concat(m)]||d[m]||p[m]||o;return n?a.createElement(f,c(c({ref:t},u),{},{components:n})):a.createElement(f,c({ref:t},u))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,c=new Array(o);c[0]=d;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s.mdxType="string"==typeof e?e:r,c[1]=s;for(var l=2;l<o;l++)c[l]=n[l];return a.createElement.apply(null,c)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5080:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return i},default:function(){return m},frontMatter:function(){return s},metadata:function(){return l},toc:function(){return p}});var a=n(7462),r=n(3366),o=(n(7294),n(4137)),c=["components"],s={title:"Contract"},i=void 0,l={unversionedId:"api-contract/start/contract.read",id:"api-contract/start/contract.read",title:"Contract",description:"The ContractPromise interface allows you to interact with a deployed contract. It provides a wrapper around the Abi or metadata JSON and allows you to read contract values and send encoded transactions to the contract.",source:"@site/docs/api-contract/start/contract.read.md",sourceDirName:"api-contract/start",slug:"/api-contract/start/contract.read",permalink:"/docs/api-contract/start/contract.read",draft:!1,editUrl:"https://github.com/polkadot-js/docs/edit/master/docs/api-contract/start/contract.read.md",tags:[],version:"current",frontMatter:{title:"Contract"},sidebar:"reference",previous:{title:"Blueprint",permalink:"/docs/api-contract/start/blueprint"},next:{title:"Contract tx",permalink:"/docs/api-contract/start/contract.tx"}},u={},p=[{value:"Reading contract values",id:"reading-contract-values",level:2}],d={toc:p};function m(e){var t=e.components,n=(0,r.Z)(e,c);return(0,o.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"ContractPromise")," interface allows you to interact with a deployed contract. It provides a wrapper around the ",(0,o.kt)("inlineCode",{parentName:"p"},"Abi")," or metadata JSON and allows you to read contract values and send encoded transactions to the contract."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"import { ContractPromise } from '@polkadot/api-contract';\n\n// The address is the actual on-chain address as ss58 or AccountId object.\nconst contract = new ContractPromise(api, metadata, address);\n")),(0,o.kt)("h2",{id:"reading-contract-values"},"Reading contract values"),(0,o.kt)("p",null,"Contract queries are executed on any contract message as a dry run, therefore not consuming any real value from the account.\nUnder the hood ",(0,o.kt)("inlineCode",{parentName:"p"},".query.<messageName>")," is using the ",(0,o.kt)("inlineCode",{parentName:"p"},"api.rpc.contracts.call")," API on the contracts pallet to retrieve a result.\nIt is useful because it encodes the message using the selector and the input values to allow execution in the contract environment.\nWe would get the value of an ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/paritytech/ink/blob/master/examples/incrementer/lib.rs"},"incrementer contract")," like so: "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"\n// maximum gas to be consumed for the call. if limit is too small the call will fail.\nconst gasLimit = 3000n * 1000000n;\n// a limit to how much Balance to be used to pay for the storage created by the contract call\n// if null is passed, unlimited balance can be used\nconst storageDepositLimit = null\n// balance to transfer to the contract account. use only with payable messages, will fail otherwise. \n// formerly know as \"endowment\"\nconst value: api.registry.createType('Balance', 1000)\n\n// (We perform the send from an account, here using Alice's address)\nconst { gasRequired, storageDeposit, result, output } = await contract.query.get(\n  alicePair.address,\n  {\n    gasLimit,\n    storageDepositLimit,\n  }\n);\n\n// The actual result from RPC as `ContractExecResult`\nconsole.log(result.toHuman());\n\n// the gas consumed for contract execution\nconsole.log(gasRequired.toHuman());\n\n// check if the call was successful\nif (result.isOk) {\n  // output the return value\n  console.log('Success', output.toHuman());\n} else {\n  console.error('Error', result.asErr);\n}\n")),(0,o.kt)("p",null," An example of querying a balance of a specific account on an erc20 contract will therefore be :"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"// the address we are going to query\nconst target = '5GNJqTPyNqANBkUVMN1LPPrxXnFouWXoe2wNSmmEoLctxiZY';\n// the address to subtract the fees from\nconst from = '5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY';\n\n// only 1 param needed, the actual address we are querying for (more\n// params can follow at the end, separated by , if needed by the message)\nconst callValue = await contract.query.balanceOf(from, { gasLimit: -1 }, target);\n")),(0,o.kt)("p",null,"In this example we have specified a ",(0,o.kt)("inlineCode",{parentName:"p"},"gasLimit")," of ",(0,o.kt)("inlineCode",{parentName:"p"},"-1"),", in a subsequent section we will expand on this. for now, just remember that is indicated to use max available, i.e. we don't explicitly want to specify a value."),(0,o.kt)("p",null,"Now that we understand the underlying call/read interfaces where a message is executed, but not part of a block, we will loo into ",(0,o.kt)("a",{parentName:"p",href:"/docs/api-contract/start/contract.tx"},"sending transaction messages")," in our next section."))}m.isMDXComponent=!0}}]);