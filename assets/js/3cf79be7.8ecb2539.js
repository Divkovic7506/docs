"use strict";(self.webpackChunkpolkadot_js=self.webpackChunkpolkadot_js||[]).push([[1934],{4137:function(e,t,r){r.d(t,{Zo:function(){return l},kt:function(){return m}});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function c(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),p=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):c(c({},t),e)),r},l=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),u=p(r),f=a,m=u["".concat(s,".").concat(f)]||u[f]||d[f]||o;return r?n.createElement(m,c(c({ref:t},l),{},{components:r})):n.createElement(m,c({ref:t},l))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,c=new Array(o);c[0]=f;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[u]="string"==typeof e?e:a,c[1]=i;for(var p=2;p<o;p++)c[p]=r[p];return n.createElement.apply(null,c)}return n.createElement.apply(null,r)}f.displayName="MDXCreateElement"},3033:function(e,t,r){r.r(t),r.d(t,{assets:function(){return l},contentTitle:function(){return s},default:function(){return m},frontMatter:function(){return i},metadata:function(){return p},toc:function(){return u}});var n=r(7462),a=r(3366),o=(r(7294),r(4137)),c=["components"],i={title:"Prerequisites"},s=void 0,p={unversionedId:"api-contract/start/prerequisites",id:"api-contract/start/prerequisites",title:"Prerequisites",description:"Connected API",source:"@site/docs/api-contract/start/prerequisites.md",sourceDirName:"api-contract/start",slug:"/api-contract/start/prerequisites",permalink:"/docs/api-contract/start/prerequisites",draft:!1,editUrl:"https://github.com/polkadot-js/docs/edit/master/docs/api-contract/start/prerequisites.md",tags:[],version:"current",frontMatter:{title:"Prerequisites"},sidebar:"reference",previous:{title:"Basics",permalink:"/docs/api-contract/start/basics"},next:{title:"Code",permalink:"/docs/api-contract/start/code"}},l={},u=[{value:"Connected API",id:"connected-api",level:2},{value:"Web3 accounts",id:"web3-accounts",level:2},{value:"Contract build artifacts",id:"contract-build-artifacts",level:2}],d={toc:u},f="wrapper";function m(e){var t=e.components,r=(0,a.Z)(e,c);return(0,o.kt)(f,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"connected-api"},"Connected API"),(0,o.kt)("p",null,"Read the section on ",(0,o.kt)("a",{parentName:"p",href:"/docs/api/start/create"},"Creating an API instance")," if you haven't done so already. The following examples assume you are connected to a compatible chain. "),(0,o.kt)("p",null,"For development purposes it's generally preferred to use a local development network, that way you can swap and purge contracts while developing. We recommend running the latest ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/paritytech/substrate-contracts-node#download-binary"},"Substrate Contracts Node")," binary."),(0,o.kt)("h2",{id:"web3-accounts"},"Web3 accounts"),(0,o.kt)("p",null,"You will need a Substrate account to sign messages. Check the ",(0,o.kt)("a",{parentName:"p",href:"/docs/api/start/keyring"},"docs section on Keyring")," in order to get access to dev accounts (Alice, Bob, Charlie, ..etc.) or create new ones. Alternatively, check out the ",(0,o.kt)("a",{parentName:"p",href:"/docs/extension"},"Extension package docs")," in order to retrieve all injected accounts. "),(0,o.kt)("h2",{id:"contract-build-artifacts"},"Contract build artifacts"),(0,o.kt)("p",null,"The contract metadata and the wasm code are generated by building the contract with a tool like ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/paritytech/cargo-contract"},"cargo-contract")," or ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/hyperledger-labs/solang#build-for-substrate"},"solang"),". These tools also generate a ",(0,o.kt)("inlineCode",{parentName:"p"},"<name>.contract")," file which contains the metadata and includes the the wasm code under ",(0,o.kt)("inlineCode",{parentName:"p"},"metadata.source.wasm"),". "),(0,o.kt)("p",null,"As metadata, all ",(0,o.kt)("inlineCode",{parentName:"p"},"api-contract")," helpers accept either a JSON string, a parsed JSON or an ",(0,o.kt)("inlineCode",{parentName:"p"},"Abi")," instance."),(0,o.kt)("p",null,"To understand everything fits together, ",(0,o.kt)("a",{parentName:"p",href:"/docs/api-contract/start/code"},"let's deploy a WASM contract and start using it"),"."))}m.isMDXComponent=!0}}]);