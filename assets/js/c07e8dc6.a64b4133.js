"use strict";(self.webpackChunkpolkadot_js=self.webpackChunkpolkadot_js||[]).push([[5416],{4137:function(e,t,n){n.d(t,{Zo:function(){return l},kt:function(){return m}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},c=Object.keys(e);for(r=0;r<c.length;r++)n=c[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(r=0;r<c.length;r++)n=c[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var i=r.createContext({}),p=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},l=function(e){var t=p(e.components);return r.createElement(i.Provider,{value:t},e.children)},u="mdxType",y={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,c=e.originalType,i=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),u=p(n),d=o,m=u["".concat(i,".").concat(d)]||u[d]||y[d]||c;return n?r.createElement(m,a(a({ref:t},l),{},{components:n})):r.createElement(m,a({ref:t},l))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var c=n.length,a=new Array(c);a[0]=d;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s[u]="string"==typeof e?e:o,a[1]=s;for(var p=2;p<c;p++)a[p]=n[p];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},4457:function(e,t,n){n.r(t),n.d(t,{assets:function(){return l},contentTitle:function(){return i},default:function(){return m},frontMatter:function(){return s},metadata:function(){return p},toc:function(){return u}});var r=n(7462),o=n(3366),c=(n(7294),n(4137)),a=["components"],s={title:"Encrypt & Decrypt Messages"},i=void 0,p={unversionedId:"util-crypto/examples/encrypt-decrypt",id:"util-crypto/examples/encrypt-decrypt",title:"Encrypt & Decrypt Messages",description:'The following example shows how to encrypt and decrypt a message with NaCl (pronouced "salt"), which is a Networking and Cryptography library used in util-crypto.',source:"@site/docs/util-crypto/examples/encrypt-decrypt.md",sourceDirName:"util-crypto/examples",slug:"/util-crypto/examples/encrypt-decrypt",permalink:"/docs/util-crypto/examples/encrypt-decrypt",draft:!1,editUrl:"https://github.com/polkadot-js/docs/edit/master/docs/util-crypto/examples/encrypt-decrypt.md",tags:[],version:"current",frontMatter:{title:"Encrypt & Decrypt Messages"},sidebar:"reference",previous:{title:"Validate Address",permalink:"/docs/util-crypto/examples/validate-address"},next:{title:"Generate a Multisig Account",permalink:"/docs/util-crypto/examples/create-multisig"}},l={},u=[],y={toc:u},d="wrapper";function m(e){var t=e.components,n=(0,o.Z)(e,a);return(0,c.kt)(d,(0,r.Z)({},y,n,{components:t,mdxType:"MDXLayout"}),(0,c.kt)("p",null,'The following example shows how to encrypt and decrypt a message with NaCl (pronouced "salt"), which is a Networking and Cryptography library used in util-crypto.'),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-javascript"},"const {\n  naclDecrypt,\n  naclEncrypt,\n  randomAsU8a\n} = require('@polkadot/util-crypto');\nconst {\n  stringToU8a,\n  u8aToString\n} = require('@polkadot/util');\n\nasync function main () {\n  const secret = randomAsU8a();\n  const messagePreEncryption = stringToU8a('super secret message');\n\n  // Encrypt the message\n  const { encrypted, nonce } = naclEncrypt(messagePreEncryption, secret);\n\n  // Show contents of the encrypted message\n  console.log(`Encrypted message: ${JSON.stringify(encrypted, null, 2)}`);\n\n  // Decrypt the message\n  const messageDecrypted = naclDecrypt(encrypted, nonce, secret);\n\n  // Convert each Uint8Array to a string for comparison\n  const isMatch = u8aToString(messagePreEncryption) === u8aToString(messageDecrypted);\n\n  // Verify that the decrypted message matches the original message\n  console.log(`Does the decrypted message match the original message? ${isMatch}`);\n}\n\nmain().catch(console.error).finally(() => process.exit());\n")))}m.isMDXComponent=!0}}]);