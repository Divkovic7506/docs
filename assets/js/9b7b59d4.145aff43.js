"use strict";(self.webpackChunkpolkadot_js=self.webpackChunkpolkadot_js||[]).push([[2605],{3905:function(e,n,t){t.d(n,{Zo:function(){return s},kt:function(){return d}});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=r.createContext({}),m=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},s=function(e){var n=m(e.components);return r.createElement(l.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,s=a(e,["components","mdxType","originalType","parentName"]),u=m(t),d=o,f=u["".concat(l,".").concat(d)]||u[d]||p[d]||i;return t?r.createElement(f,c(c({ref:n},s),{},{components:t})):r.createElement(f,c({ref:n},s))}));function d(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,c=new Array(i);c[0]=u;var a={};for(var l in n)hasOwnProperty.call(n,l)&&(a[l]=n[l]);a.originalType=e,a.mdxType="string"==typeof e?e:o,c[1]=a;for(var m=2;m<i;m++)c[m]=t[m];return r.createElement.apply(null,c)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},7052:function(e,n,t){t.r(n),t.d(n,{assets:function(){return s},contentTitle:function(){return l},default:function(){return d},frontMatter:function(){return a},metadata:function(){return m},toc:function(){return p}});var r=t(7462),o=t(3366),i=(t(7294),t(3905)),c=["components"],a={title:"Create Mnemonic"},l=void 0,m={unversionedId:"util-crypto/examples/create-mnemonic",id:"util-crypto/examples/create-mnemonic",title:"Create Mnemonic",description:"The following example shows how to create and generate mnemonics using BIP39.",source:"@site/docs/util-crypto/examples/create-mnemonic.md",sourceDirName:"util-crypto/examples",slug:"/util-crypto/examples/create-mnemonic",permalink:"/docs/util-crypto/examples/create-mnemonic",draft:!1,editUrl:"https://github.com/polkadot-js/docs/edit/master/docs/util-crypto/examples/create-mnemonic.md",tags:[],version:"current",frontMatter:{title:"Create Mnemonic"},sidebar:"reference",previous:{title:"Overview",permalink:"/docs/util-crypto/examples"},next:{title:"Validate Address",permalink:"/docs/util-crypto/examples/validate-address"}},s={},p=[],u={toc:p};function d(e){var n=e.components,t=(0,o.Z)(e,c);return(0,i.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"The following example shows how to create and generate mnemonics using BIP39."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const {\n  mnemonicGenerate,\n  mnemonicToMiniSecret,\n  mnemonicValidate,\n  ed25519PairFromSeed\n} = require('@polkadot/util-crypto');\n\nasync function main () {\n  // Create mnemonic string for Alice using BIP39\n  const mnemonicAlice = mnemonicGenerate();\n\n  console.log(`Generated mnemonic: ${mnemonicAlice}`);\n\n  // Validate the mnemonic string that was generated\n  const isValidMnemonic = mnemonicValidate(mnemonicAlice);\n\n  console.log(`isValidMnemonic: ${isValidMnemonic}`);\n\n  // Create valid Substrate-compatible seed from mnemonic\n  const seedAlice = mnemonicToMiniSecret(mnemonicAlice);\n\n  // Generate new public/secret keypair for Alice from the supplied seed\n  const { publicKey, secretKey } = ed25519PairFromSeed(seedAlice);\n}\n\nmain().catch(console.error).finally(() => process.exit());\n")))}d.isMDXComponent=!0}}]);